"use strict";(self.webpackChunkreact_notes=self.webpackChunkreact_notes||[]).push([[719],{8387:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"Java/Basics/introduction","title":"Introduction","description":"Follow the code-comments to understand variables, if-else, loops","source":"@site/docs/Java/Basics/introduction.md","sourceDirName":"Java/Basics","slug":"/Java/Basics/introduction","permalink":"/notes/docs/Java/Basics/introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Java/Basics/introduction.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Hello World","permalink":"/notes/docs/Java/Basics/hello_world"},"next":{"title":"Matrix Rotation with Constraints","permalink":"/notes/docs/Java/Basics/2d_matrix_problem"}}');var a=e(4848),s=e(8453);const i={sidebar_position:3},r="Introduction",c={},d=[];function l(n){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,a.jsx)(t.p,{children:"Follow the code-comments to understand variables, if-else, loops"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'package basics;\n\nimport java.lang.reflect.Array;\n\n/*\n* General Observations\n* If-else Syntax is same as C++\n* Switch Syntax is same as C++\n* While, for(;;), for(int x: nums) Loop Syntax is same as C++ \n*/\npublic class introduction {\n    public static void understand_variables(){\n        int  a = 3;\n        double b = 11.0/2;\n        boolean c = true;\n        char d = \'d\';\n        String e = "abcd";\n\n        System.out.println("Your varibles values are : " + a + ", " + b + ", " + c + ", " + d + ", " + e);\n        // Typecasting\n        int f = (int) b;\n        System.out.println("After typecasting the value changes from "+  b +  " --\x3e " + f);\n\n    }\n\n    public static void pyramid(int n, char spacer){\n        int num = 1;\n        for(int i =1 ;i <= n; i++){\n            String out = "";\n            for(int spacer_loop = n - i;  spacer_loop >= 0; spacer_loop--){\n                out += spacer;\n            }\n            for(int z = 0; z < i; z++){\n                out = out + num + spacer;\n                num++;\n            }\n\n            System.out.println(out);\n        }\n    }\n        \n    public static void main(String[] args){\n        understand_variables();\n        pyramid(5, \' \');\n    }\n}\n\n'})})]})}function u(n={}){const{wrapper:t}={...(0,s.R)(),...n.components};return t?(0,a.jsx)(t,{...n,children:(0,a.jsx)(l,{...n})}):l(n)}},8453:(n,t,e)=>{e.d(t,{R:()=>i,x:()=>r});var o=e(6540);const a={},s=o.createContext(a);function i(n){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function r(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),o.createElement(s.Provider,{value:t},n.children)}}}]);