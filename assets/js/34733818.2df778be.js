"use strict";(self.webpackChunkreact_notes=self.webpackChunkreact_notes||[]).push([[730],{2731:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"Java/OOPS/inheritence","title":"Inheritance","description":"Let\'s cover a basic level of inheritence","source":"@site/docs/Java/OOPS/inheritence.md","sourceDirName":"Java/OOPS","slug":"/Java/OOPS/inheritence","permalink":"/notes/docs/Java/OOPS/inheritence","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Java/OOPS/inheritence.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/notes/docs/Java/OOPS/introduction"},"next":{"title":"Abstract Class","permalink":"/notes/docs/Java/OOPS/abstract_class"}}');var t=s(4848),i=s(8453);const l={sidebar_position:2},r="Inheritance",c={},o=[{value:"Understanding Protected",id:"understanding-protected",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"inheritance",children:"Inheritance"})}),"\n",(0,t.jsx)(n.p,{children:"Let's cover a basic level of inheritence\nFollowing Section Cover the following:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"extends"})," keyword"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"private"})," vs ",(0,t.jsx)(n.code,{children:"public"})," vs ",(0,t.jsx)(n.code,{children:"protected"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"super"})," keyword"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Follow the code-comments to refersh it up:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// BaseClass.java\n\npackage oops.inheritence;\n\npublic class BaseClass {\n    public int base1 = 0;\n    private int base2 = 0;\n    /* \n    Accessible within the same package or in subclasses \u2014 \n    but not by unrelated classes in different packages.\n    */ \n    protected int base3 = 0;\n\n    public BaseClass(){}\n\n    public BaseClass(int base1,int base2,int base3){\n        this.base1 = base1;\n        this.base2 = base2;\n        this.base3 = base3;\n    }\n\n    public void sayHi(){\n        System.out.printf(\n        """\n        ---------------------------------------------------\n        Hello from Base-Class, My Attributes are %d, %d, %d\n        ---------------------------------------------------\n        """, base1, base2, base3);\n    }\n\n    protected void sayHiAgain(){\n        System.out.printf(\n        """\n        ---------------------------------------------------\n        Hello from Base-Class, My Attributes are %d, %d, %d\n        ---------------------------------------------------\n        """, base1, base2, base3);\n    }\n\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"And the child-class is as:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// ChildClass.java\n\npackage oops.inheritence;\n\n// extends is used to specify Parent Class\npublic class ChildClass extends BaseClass {\n    public int child1 = 0;\n\n    public ChildClass(int b1, int b2, int b3, int c1) {\n        // super is used to refer to Parent\n        super(b1, b2, b3);// Will call parent Constructors\n        child1 = c1;\n    }\n\n    public void sayHi() {\n        System.out.printf(\n            """\n            ----------------------------------------------\n            Hello from Child-Class, My Attributes are %d\n            ----------------------------------------------\n            """, child1);\n    }\n\n    public void askParentToSayHi(){\n        // super can also be used to call parent methods as well as attributes\n        super.sayHi();\n    }\n\n\n    public static void main(String[] args) {\n        ChildClass myChildObj = new ChildClass(10, 20, 30, 40);\n        /*\n         * We can ascess:\n         * Child attributes, Parents Public & Protected Attributes\n         * But not parent Private attributes\n         */\n        System.out.println(myChildObj.base1 + ", " + myChildObj.base3 + ", " + myChildObj.child1);\n        myChildObj.sayHi();// Will Call Child Class Method\n        myChildObj.sayHiAgain();// Since, Child has no definations, It will call Base Class\'s Method\n        myChildObj.askParentToSayHi();// Will call Parent Class Method\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"understanding-protected",children:"Understanding Protected"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"Accessible within the same package or in subclasses \u2014 but not by unrelated classes in different packages."}),"\n",(0,t.jsx)(n.p,{children:"Let's understand with current scenario:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\n# Consider the folder-structure\noops:.\n\u251c\u2500\u2500\u2500external_package\n\u2502       ExtPkgClass.java\n\u2502\n\u251c\u2500\u2500\u2500inheritence\n\u2502       AnyOtherClass.java\n\u2502       BaseClass.java\n\u2502       ChildClass.java\n"})}),"\n",(0,t.jsx)(n.p,{children:"Follow the code-comments of the other file's code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// AnyOtherClass.java\npackage oops.inheritence;\n\npublic class AnyOtherClass {\n    public static void main(String[] args){\n        // Within Same Package Protected Attributes are available\n        ChildClass myChildObjOutside = new ChildClass(-10, -20, -30, -40);\n        System.out.println(myChildObjOutside.base3);\n        BaseClass myBase = new BaseClass(2, 3, 4);\n        System.out.println(myBase.base3);\n    }\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"package oops.external_package;\n\nimport oops.inheritence.ChildClass;\nimport oops.inheritence.BaseClass;\n\npublic class ExtPkgClass {\n    public static void main(String[] args){\n        ChildClass myChildObjOutside = new ChildClass(-10, -20, -30, -40);\n        myChildObjOutside.base1 = 9; // Will Work\n        // Won't Work because base3 is protected and not available in another package\n        // System.out.println(myChildObjOutside.base3);\n        BaseClass myBase = new BaseClass(2, 3, 4);\n        myBase.base1 = 9; // Will Work\n        // Won't Work because base3 is protected and not available in another package\n        // System.out.println(myBase.base3);\n        // myBase.sayHiAgain();\n    }\n    \n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>r});var a=s(6540);const t={},i=a.createContext(t);function l(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);