"use strict";(self.webpackChunkreact_notes=self.webpackChunkreact_notes||[]).push([[629],{9334:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"Communication/parent_to_child","title":"Parent to Child Communication","description":"A Parent can communicate to its child with the help of props as follows:","source":"@site/docs/Communication/parent_to_child.md","sourceDirName":"Communication","slug":"/Communication/parent_to_child","permalink":"/react-notes/docs/Communication/parent_to_child","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Communication/parent_to_child.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"useRef","permalink":"/react-notes/docs/Basics/React-Hooks/useRef"},"next":{"title":"Bootstrap in React","permalink":"/react-notes/docs/Bootstrap/"}}');var r=t(4848),i=t(8453);const s={sidebar_position:1},c="Parent to Child Communication",a={},d=[];function l(n){const e={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"parent-to-child-communication",children:"Parent to Child Communication"})}),"\n",(0,r.jsxs)(e.p,{children:["A Parent can communicate to its child with the help of ",(0,r.jsx)(e.code,{children:"props"})," as follows:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'<Child id="2">\n\n// Usage in Child\nfunction Child(props){\n    console.log(props.id);\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"Note: Whenever a Parent re-renders,It will re-render all of its child even if the Child props are not changed, verify this in the following example"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'import { Button } from "react-bootstrap"\nimport { useState } from "react"\n\nfunction Child(props){\n    return(\n        <div>\n            <hr></hr>\n            <p>Id of Child is \'{props.id}\'</p>\n            <p>The Value of Parent Counter is {props.counter}</p>\n            {console.log(\'Child with id = \' + props.id + \'  Rendered\')}\n            <hr></hr>\n        </div>\n    )\n}\n\nexport {Child};\n\nfunction Parent(){\n    const [counter, setcounter] = useState(1)\n    \n    console.log("Rendering Components")\n    return (\n        <div>\n            <Child id="Parent-dependent-counter" counter={counter}></Child>\n            <Child id="Constant Counter" counter="0"></Child>\n\n            <Button variant="outline-primary" className="ms-3" onClick={() => setcounter(counter  + 1)}>Increment Counter</Button>\n            {console.log("Parent Rendered")}\n        </div>\n    )\n}\n\nexport {Parent}\n'})})]})}function u(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>c});var o=t(6540);const r={},i=o.createContext(r);function s(n){const e=o.useContext(i);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:s(n.components),o.createElement(i.Provider,{value:e},n.children)}}}]);