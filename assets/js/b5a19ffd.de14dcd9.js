"use strict";(self.webpackChunkreact_notes=self.webpackChunkreact_notes||[]).push([[769],{1030:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"Java/OOPS/introduction","title":"Introduction","description":"OOPS in Java is similar to C++","source":"@site/docs/Java/OOPS/introduction.md","sourceDirName":"Java/OOPS","slug":"/Java/OOPS/introduction","permalink":"/notes/docs/Java/OOPS/introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Java/OOPS/introduction.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Enum","permalink":"/notes/docs/Java/Basics/enum"},"next":{"title":"Inheritance","permalink":"/notes/docs/Java/OOPS/inheritence"}}');var i=t(4848),s=t(8453);const r={sidebar_position:1},o="Introduction",u={},c=[];function l(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,i.jsx)(n.p,{children:"OOPS in Java is similar to C++"}),"\n",(0,i.jsx)(n.p,{children:"Follow the code-comments to refresh it up"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Car.java\n\npackage oops;\n\n// General Notation is to ClassName as PascalCase (MyApplication)\npublic class Car {\n    String brand = "";\n    double fuel = 0, mileage = 0;\n    \n    // Encapsulation: These variables should not be modified outside the class i.e "sensitive-data hidden from user"\n    private double s = 0, v = 0, t = 0;\n    /*\n     * Constructor:\n     * No Return Type and Same Name as Class\n     */\n    public Car(String brand, double fuel, double mileage){\n        // Java has same \'this\' operator as C++\n        this.brand = brand;\n        this.fuel = fuel;\n        this.mileage = mileage;\n    }\n    /*\n     * Static V/s Public\n     * Static method can be called without creating the objects of the class,\n     * Basically, If your fxn logic, doesn\'t need objects attributes context better to use static.\n     * Public Method can only be accessed by objects\n     */\n    static void sayHi(){\n        System.out.println("Hi Car");\n    }\n\n    public void print(){\n        String message = String.format("""\n                ---------------------------------------------------------------------\n                Car Brand : %s,\n                Fuel : %.2f l, Current Mileage : %.2f km/l,\n                Distance: %.2f km, Current-Speed: %.2f Km/hr, Total-Time: %.2f hrs. \n                ---------------------------------------------------------------------\n                """, brand, fuel, mileage, s, v, t);\n        System.out.println(message);\n    }\n\n    private double fuelUsed(double distance){\n        return distance/mileage;\n    }\n\n    public double accelerate(double a, double time){\n        if(this.fuel <= 0){\n            System.out.println("Insufficient Fuel");\n            return -1;\n        }\n        System.out.println("Attempting to accelarte " + a + " km/hr for t = " + time + " hrs");\n        double estimatedDistance = v*time + a*time*time/2.0;\n        double estimatedFuel = fuelUsed(estimatedDistance);\n        if(estimatedFuel <= this.fuel){\n            // Update\n            this.fuel -= estimatedFuel;\n            this.t += time;\n            this.s += estimatedDistance;\n            this.v += a*time;\n            return s;\n        }\n        System.out.println("Fuel is not sufficient");\n        estimatedDistance = this.fuel * this.mileage;\n        /*\n         * s = ut + 1/2*at^2\n         * 1/2*at^2 + ut - s\n         * \n         * Discrimant = u^2 + 2*a*s\n         * t = (-u +- sqrt(Discrimant))/2*a\n         */\n        // Solving the quaratic\n        double D_sqrt = Math.sqrt(v*v + 2.0*a*estimatedDistance);\n        double t1 = (-v + D_sqrt)/a,  t2 = (-v - D_sqrt)/a;\n        double estimatedTime = (t2 < 0 ? t1 : t2);\n        System.out.println("Your Car Will only run till time = " + estimatedTime);\n\n        this.s += estimatedDistance;\n        this.t += estimatedTime;\n        this.fuel = 0;\n        this.v += a*estimatedTime;\n        return s;\n    }\n\n    \n}\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"And the Runner:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// runner.java\n\npackage oops;\n\npublic class runner {\n    public static void main(String[] args){\n        \n        System.out.println("Hello World from runner");\n        Car myCar = new Car("Toyota", 100, 25);\n        myCar.print();\n        double run[][] = {\n            {10, 1},\n            {20, 1},\n            {20, 5},\n            {-20, 5},\n            {30, 10},\n            {-30, 5}\n        };\n        for(double cur[]: run){\n            double status = myCar.accelerate(cur[0], cur[1]);\n            if(status != -1)\n                myCar.print();\n        }\n    }\n}\n\n'})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(6540);const i={},s=a.createContext(i);function r(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);