"use strict";(self.webpackChunkreact_notes=self.webpackChunkreact_notes||[]).push([[941],{9772:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"React/Advanced/Charts/line_plot","title":"Line-Plot","description":"Light-Mode NavBar","source":"@site/docs/React/Advanced/Charts/line_plot.md","sourceDirName":"React/Advanced/Charts","slug":"/React/Advanced/Charts/line_plot","permalink":"/notes/docs/React/Advanced/Charts/line_plot","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/React/Advanced/Charts/line_plot.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Getting-Started","permalink":"/notes/docs/React/Advanced/Charts/installation"},"next":{"title":"Deploying React-App on Github-Pages","permalink":"/notes/docs/React/Advanced/github-pages-deployment"}}');var a=t(4848),o=t(8453);const i={sidebar_position:2},s="Line-Plot",d={},c=[{value:"Line-Plot With Gradient",id:"line-plot-with-gradient",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"line-plot",children:"Line-Plot"})}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Light-Mode NavBar",src:t(9573).A+"",width:"1897",height:"523"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { Line } from \"react-chartjs-2\";\n// Chart is imported to avoid error \"category is not a registered scale\"\nimport Chart from \"chart.js/auto\";\n\nconst data = {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    datasets: [\n        {\n            label: 'Rainfall',\n            data: [65, 59, 80, 81, 56, 101, 121, 102, 72, 59, 21, 14],\n            lineTension: 0.5, // 0 for Straight line, Increase it to make line curve\n            fill: true,// Area under curve is highlighted\n            borderWidth: 2,\n            pointBorderWidth: 8,\n            pointHoverRadius: 8,\n            pointHoverBorderWidth: 3,\n            pointRadius: 3,\n        }\n    ]\n}\nconst options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    legend: {\n        position: \"none\"\n    },\n\n}\n\nfunction TrendPlot() {\n    return (\n        <div>\n            <h4 className='light_text' style={{ textAlign: \"center\" }}>Line-Plot</h4>\n            <div className='container-fluid light_text' >\n                <Line data={data} options={options} height=\"300px\" />\n            </div>\n\n        </div>\n    )\n}\n\nexport { TrendPlot };\n"})}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.h2,{id:"line-plot-with-gradient",children:"Line-Plot With Gradient"}),"\n",(0,a.jsx)("hr",{}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Light-Mode NavBar",src:t(9792).A+"",width:"1899",height:"528"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"import { Line } from \"react-chartjs-2\";\n// Chart is imported to avoid error \"category is not a registered scale\"\nimport Chart from \"chart.js/auto\";\nimport { useState, useEffect, useRef } from \"react\";\n\n//Intial Configurations\nconst data = {\n  labels: ['January', 'February', 'March', 'April', 'May'],\n  datasets: [\n      {\n          label: 'Rainfall',\n          data: [65, 59, 80, 81, 56]\n      }\n  ]\n}\nconst options = {\n  responsive: true,\n  maintainAspectRatio: false,\n  legend: {\n    position: \"none\"\n  },\n}\n\nfunction TrendPlot() {\n  const chartElement = useRef();\n  const [chartData, set_chartData] = useState(data);\n\n  // We need the component to render first, in order for reference 'chartElement' to set properly.\n  useEffect(() => {\n    fill_chart_data();\n  }, [])\n\n  function createGradient(ctx, area) {\n    const gradientStroke = ctx.createLinearGradient(0, area.bottom, 0, area.top);\n    var first_color_combo = [\"#F44336\", \"#F50057\", \"#FF4081\", \"#FF9100\"];\n    var second_color_combo = [\"#7C4DFF\", \"#448AFF\", \"#00BCD4\", \"#1DE9B6\"];\n    var basic_color_combo = ['red', 'yellow', 'blue', 'green'];\n\n    var color = second_color_combo; // Try\n    // Describe Gradient\n    // Pure-Color[0](0%) --\x3e Pure-Color[1](30%) --\x3e Pure-Color[2](60%) --\x3e Pure-Color[3](100%)\n    gradientStroke.addColorStop(0, color[0]);\n    gradientStroke.addColorStop(0.3, color[1]);\n    gradientStroke.addColorStop(0.6, color[2]);\n    gradientStroke.addColorStop(1, color[3]);\n\n    return gradientStroke;\n  }\n\n  function fill_chart_data() {\n    // ChartElement reference is used to generate Gradient, Therefore component need to render first with dummy data\n    var gradientStroke = createGradient(chartElement.current.ctx, chartElement.current.chartArea);\n    const data = {\n        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n        datasets: [\n          {\n            label: 'Rainfall',\n            data: [65, 59, 80, 81, 56, 101, 121, 102, 72, 59, 21, 14],\n            lineTension: 0.5, // 0 for Straight line, Increase it to make line curve\n            fill: false,// Area under curve is highlighted\n            borderWidth: 2,\n            pointBorderWidth: 8,\n            pointHoverRadius: 8,\n            pointHoverBorderWidth: 3,\n            pointRadius: 3,\n            // Gradient-Related\n            borderColor: gradientStroke,\n            pointBorderColor: gradientStroke,\n            pointBackgroundColor: gradientStroke,\n            pointHoverBackgroundColor: gradientStroke,\n            pointHoverBorderColor: gradientStroke,\n          }\n        ]\n    }\n    set_chartData(data);\n}\n\n\n  return (\n    <div>\n      <h4 className='light_text' style={{ textAlign: \"center\" }}>Line-Plot-Gradient-Size</h4>\n      <div className='container-fluid light_text' >\n        <Line ref={chartElement} data={chartData} options={options} height=\"300px\" />\n      </div>\n    </div>\n  )\n}\n\nexport { TrendPlot };\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},9573:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/line_plot_default-e1ac973b315470f8abf93e4ea8b59231.png"},9792:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/line_plot_gradient-d5e48657603ee97e04d6e6cfe252a539.png"},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var r=t(6540);const a={},o=r.createContext(a);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);