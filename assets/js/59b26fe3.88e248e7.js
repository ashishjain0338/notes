"use strict";(self.webpackChunkreact_notes=self.webpackChunkreact_notes||[]).push([[265],{2121:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Java/Basics/2d_matrix_problem","title":"Matrix Rotation with Constraints","description":"Problem Statement:","source":"@site/docs/Java/Basics/2d_matrix_problem.md","sourceDirName":"Java/Basics","slug":"/Java/Basics/2d_matrix_problem","permalink":"/notes/docs/Java/Basics/2d_matrix_problem","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Java/Basics/2d_matrix_problem.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/notes/docs/Java/Basics/introduction"}}');var i=t(4848),o=t(8453);const a={sidebar_position:4},s="Matrix Rotation with Constraints",c={},l=[{value:"Check the Solution Below:",id:"check-the-solution-below",level:3}];function d(n){const e={code:"code",h1:"h1",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"matrix-rotation-with-constraints",children:"Matrix Rotation with Constraints"})}),"\n",(0,i.jsxs)(e.p,{children:["Problem Statement:\nYou are given a square matrix N x N of integers. You need to rotate the matrix ",(0,i.jsx)(e.code,{children:"90 degrees clockwise"})," in-place (i.e., without using another 2D matrix)."]}),"\n",(0,i.jsx)(e.p,{children:"However, there's a twist:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["Only rotate the matrix if it contains at least one ",(0,i.jsx)(e.code,{children:"prime number"}),"."]}),"\n",(0,i.jsx)(e.li,{children:'If not, leave it unchanged and print "No prime found".'}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Example:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"a, b, c         g, d, a\nd, e, f   --\x3e   h, e, b\ng, h, i         i, f, c\n"})}),"\n",(0,i.jsx)(e.h3,{id:"check-the-solution-below",children:"Check the Solution Below:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package basics;\n\npublic class problem_I {\n\n    /*\n     * Problem Statement-I:\n     * You are given a square matrix N x N of integers.\n     * You need to rotate the matrix 90 degrees clockwise in-place (i.e., without\n     * using another 2D matrix).\n     * However, there\'s a twist:\n     * Only rotate the matrix if it contains at least one prime number.\n     * If not, leave it unchanged and print "No prime found".\n     */\n    public static void problemI(int[][] arr) {\n        System.out.println("-------------- Running Problem-I with Input as ------------");\n        array_printer(arr);\n        int n = arr.length;\n        boolean has_prime = false;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (isPrime(arr[i][j])) {\n                    has_prime = true;\n                    break;\n                }\n            }\n        }\n        if (!has_prime) {\n            System.out.println("No Prime Detected Exiting");\n            return;\n        }\n        /*\n         * a, b, c g, d, a\n         * d, e, f h, e, b\n         * g, h, i --\x3e i, f, c\n         * \n         */\n        // Step-1: Swap ith row, column as {g, c}, {h, f}\n        for (int col = n - 1; col >= 0; col--) {\n            for (int row = 0; row < col; row++) {\n                // Swap {row, col} with {col, row}\n                int temp = arr[row][col];\n                arr[row][col] = arr[col][row];\n                arr[col][row] = temp;\n            }\n        }\n        // Step-2: Reverse each row\n        for(int row = 0; row < n; row++){\n            reverse(arr[row]);\n        }\n\n        System.out.println("Your Output is :");\n        array_printer(arr);\n\n\n    }\n\n    public static void array_printer(int arr[][]) {\n        for (int i = 0; i < arr.length; i++) {\n            for (int j = 0; j < arr[0].length; j++) {\n                System.out.print(arr[i][j] + " ");\n            }\n            System.out.println();\n        }\n    }\n\n    public static void reverse(int arr[]){\n        int l = 0, r = arr.length - 1;\n        while(r >= l){\n            int temp = arr[r];\n            arr[r] = arr[l];\n            arr[l] = temp;\n            r--;\n            l++;\n        }\n    }\n\n    public static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                return false;\n            }\n        }\n        return true;\n\n    }\n\n    public static void main(String[] args) {\n        int[][][] problemI_testcases = {\n                {\n                        { 1, 2, 3 },\n                        { 4, 5, 6 },\n                        { 7, 8, 9 }\n                },\n                {\n                        { 4, 6 },\n                        { 7, 8 }\n                },\n                {\n                        { 1 }\n                },\n                {\n                        { 13 }\n                }\n        };\n        for (int[][] tc : problemI_testcases) {\n            problemI(tc);\n        }\n    }\n}\n'})})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>s});var r=t(6540);const i={},o=r.createContext(i);function a(n){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);