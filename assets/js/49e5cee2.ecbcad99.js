"use strict";(self.webpackChunkreact_notes=self.webpackChunkreact_notes||[]).push([[941],{3047:(s,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"Java/OOPS/abstract_class","title":"Abstract Class","description":"An abstract class is like a person saying:","source":"@site/docs/Java/OOPS/abstract_class.md","sourceDirName":"Java/OOPS","slug":"/Java/OOPS/abstract_class","permalink":"/notes/docs/Java/OOPS/abstract_class","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Java/OOPS/abstract_class.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Inheritance","permalink":"/notes/docs/Java/OOPS/inheritence"},"next":{"title":"Interface","permalink":"/notes/docs/Java/OOPS/interface"}}');var e=a(4848),c=a(8453);const i={sidebar_position:3},r="Abstract Class",o={},l=[];function d(s){const t={code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,c.R)(),...s.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(t.header,{children:(0,e.jsx)(t.h1,{id:"abstract-class",children:"Abstract Class"})}),"\n",(0,e.jsx)(t.p,{children:"An abstract class is like a person saying:"}),"\n",(0,e.jsxs)(t.ol,{children:["\n",(0,e.jsx)(t.li,{children:"You can't create an object of me directly."}),"\n",(0,e.jsx)(t.li,{children:"If you want to use me, you must inherit me in a subclass."}),"\n",(0,e.jsx)(t.li,{children:"Any subclass must provide concrete implementations for all my abstract methods."}),"\n"]}),"\n",(0,e.jsx)(t.p,{children:"Follow the code-comments to know more:"}),"\n",(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:"language-java",children:"// AbstractClass.java\n\npackage oops.abstract_class;\n\n/*\n* Abstract is a restricted class, You can't make objects of abstract class,\n* But can only be inherited from.\n*/\nabstract class AbstractClass {\n    int base1 = 10;\n\n    /*\n     * Abstract Methods can't have any body, only definations\n     * The Body is provided from subclass (which will inherit it)\n     */\n    abstract void sayHi();\n\n    /*\n     * Abstract class can have normal methods too\n     */\n    public void sayHiGiveItATry(){\n        System.out.println(\"Yes, I can say Hi, Just slightly restriced\");\n    }\n\n\n}\n"})}),"\n",(0,e.jsx)(t.pre,{children:(0,e.jsx)(t.code,{className:"language-java",children:"// ChildClass.java\n\npackage oops.abstract_class;\n\npublic class ChildClass extends AbstractClass{\n\n    /*\n     * Since the Super(Parent) Class is abstract class with abstract method 'sayHi',\n     * This class MUST provide the body\n     * If you comment out the below function, It won't function\n     */\n    public void sayHi(){\n        System.out.println(\"Hi, from the Child Class\");\n    }\n\n    // You can any other function too\n    public void abc(){\n        System.out.println(\"ABC called\");\n    }\n\n    public static void main(String[] args){\n        ChildClass mychildObj = new ChildClass();\n        mychildObj.sayHi();// Will call the child's defination\n        mychildObj.sayHiGiveItATry();// Will call the abstract class's normal method\n        mychildObj.abc();// Like a normal method\n        System.out.println(mychildObj.base1);// Abstract Attribtes are available to child as normal\n    }\n}\n"})})]})}function h(s={}){const{wrapper:t}={...(0,c.R)(),...s.components};return t?(0,e.jsx)(t,{...s,children:(0,e.jsx)(d,{...s})}):d(s)}},8453:(s,t,a)=>{a.d(t,{R:()=>i,x:()=>r});var n=a(6540);const e={},c=n.createContext(e);function i(s){const t=n.useContext(c);return n.useMemo((function(){return"function"==typeof s?s(t):{...t,...s}}),[t,s])}function r(s){let t;return t=s.disableParentContext?"function"==typeof s.components?s.components(e):s.components||e:i(s.components),n.createElement(c.Provider,{value:t},s.children)}}}]);