"use strict";(self.webpackChunkreact_notes=self.webpackChunkreact_notes||[]).push([[397],{4360:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"Java/OOPS/interface","title":"Interface","description":"1. Interface is like a complete-abstract class.","source":"@site/docs/Java/OOPS/interface.md","sourceDirName":"Java/OOPS","slug":"/Java/OOPS/interface","permalink":"/notes/docs/Java/OOPS/interface","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Java/OOPS/interface.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Abstract Class","permalink":"/notes/docs/Java/OOPS/abstract_class"}}');var s=t(4848),c=t(8453);const i={sidebar_position:4},o="Interface",r={},l=[];function d(e){const n={code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"interface",children:"Interface"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Interface is like a ",(0,s.jsx)(n.code,{children:"complete-abstract"})," class."]}),"\n",(0,s.jsxs)(n.li,{children:["Keyword ",(0,s.jsx)(n.code,{children:"implements"})," is used instead of ",(0,s.jsx)(n.code,{children:"extends"})," and ",(0,s.jsx)(n.code,{children:"interface"})," instead of ",(0,s.jsx)(n.code,{children:"abstract"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Follow the code-comments to know more:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// InterfaceClass.java\n\npackage oops.interface_class;\n\n/*\n* Interface class is a complete abstract class\n* (No Objects, No Method Body(Strictly), Only Method Definations)\n* Abstract classes can contain Normal-Method (like sayHiGiveItATry), but interface's can't\n*/\ninterface InterfaceClass {\n    // You don't need to specify it as abstract method, It will be by default\n    public void sayHi();\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// ChildClass.java\n\npackage oops.interface_class;\n\n/*\n * For Interfaces the keyword is implements instead of extends\n */\npublic class ChildClass implements InterfaceClass{\n\n    /*\n     * The class must implement all the methods of Interface\n     */\n    public void sayHi(){\n        System.out.println("Hi, from the Child Class");\n    }\n\n    // You can have any other function too\n    public void abc(){\n        System.out.println("ABC called");\n    }\n\n    public static void main(String[] args){\n        ChildClass mychildObj = new ChildClass();\n        mychildObj.sayHi();// Will call the child\'s defination\n        mychildObj.abc();// Like a normal method as normal\n    }\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6540);const s={},c=a.createContext(s);function i(e){const n=a.useContext(c);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(c.Provider,{value:n},e.children)}}}]);